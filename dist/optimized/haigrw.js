import "../chunks/event-state.js";
import "@sveltejs/kit";
import { f } from "../chunks/form.js";
import { q } from "../chunks/query.js";
import { getGeneralId } from "./1dw4xl7.js";
import { getMULDataFromName, isUnique, isAvailable } from "./1bh77am.js";
import { getDocument } from "pdfjs-dist";
import "../chunks/shared.js";
import "../chunks/prerender.js";
import "../chunks/prisma.js";
import "zod";
import "../chunks/abilityUtilities.js";
function getUnitDataFromPDF(content, metadata) {
  if (content.items[0].str == "Master Unit List - Forces") {
    return { status: "success", data: parseMul(content) };
  } else if (metadata.Creator && metadata.Creator == "Terminal") {
    return { status: "success", data: parseTerminal(content, metadata.Keywords) };
  } else {
    return { status: "failed" };
  }
}
function parseMul(content) {
  let startingIndex, stepCount, upperlimit;
  startingIndex = 12;
  stepCount = 9;
  upperlimit = content.items.length - 7;
  const parsedData = [];
  for (let currIndex = startingIndex; currIndex < upperlimit; currIndex += stepCount) {
    let name = content.items[currIndex].str;
    if (content.items[currIndex + 1].str != " ") {
      name += " " + content.items[currIndex + 1].str;
      currIndex++;
    }
    const pv = Number(content.items[currIndex + 6].str);
    const skill = Number(content.items[currIndex + 4].str);
    parsedData.push({ name, pv, skill });
  }
  return parsedData;
}
function parseTerminal(content, style) {
  var _a, _b;
  const startingIndex = content.items.findIndex((value) => {
    const { str, transform } = value;
    return str == "PV" && transform[5] == "748.456";
  }) + 2;
  const endingIndex = content.items.findIndex((value) => {
    const { str, transform } = value;
    return str == "Units" && transform[5] < "748.456";
  }) - 3;
  let unitItems = content.items.splice(startingIndex, endingIndex - startingIndex + 1).filter((value) => {
    return "str" in value;
  });
  let nextIndex = unitItems.findIndex((value) => {
    return value.hasEOL;
  });
  const unitLines = [];
  while (nextIndex != endingIndex && nextIndex != -1) {
    const nextLine = unitItems.splice(0, nextIndex + 1);
    unitLines.push(nextLine);
    nextIndex = unitItems.findIndex((value) => {
      return value.hasEOL;
    });
  }
  const unitData = [];
  for (const chunk of unitLines) {
    const name = chunk.slice(0, style == "detailed" ? -17 : -9).map((value) => value.str).join("");
    const pv = Number((_a = chunk.at(-4)) == null ? void 0 : _a.str);
    const skill = Number((_b = chunk.at(-6)) == null ? void 0 : _b.str);
    unitData.push({ name, pv, skill });
  }
  return unitData;
}
const getUnitData = f(async (data) => {
  var _a, _b, _c;
  const fileData = data.get("listFile");
  const era = Number((_a = data.get("selectedEra")) == null ? void 0 : _a.toString());
  const faction = Number((_b = data.get("selectedFaction")) == null ? void 0 : _b.toString());
  let unitData = [];
  const buffer = await fileData.arrayBuffer();
  const pdf = await getDocument(buffer).promise;
  const metadata = (await pdf.getMetadata()).info;
  const page = await pdf.getPage(1);
  const content = await page.getTextContent();
  const parsedData = getUnitDataFromPDF(content, metadata);
  if (parsedData.status == "failed")
    return { status: "failed", message: "Invalid PDF Format. Either it wasn't generated by the MUL or this site, or my reader is broken somehow." };
  if (parsedData.status == "ongoing")
    return { status: "failed", message: "PDF format will be supported soon, but is currently in progress. Please upload a pdf generated from the MUL" };
  for (const parsedUnit of parsedData.data ?? []) {
    const unit = await getMULDataFromName(parsedUnit.name);
    let unique, available;
    if (unit) {
      unique = await isUnique({ mulId: unit.mulId, era });
      const general = (_c = await getGeneralId({ era, faction })) == null ? void 0 : _c.general;
      available = await isAvailable({ mulId: unit.mulId, eras: [era], factions: [faction, general ?? 0] });
    }
    unitData.push({
      id: crypto.randomUUID(),
      name: parsedUnit.name,
      skill: parsedUnit.skill,
      pv: parsedUnit.pv,
      mulData: unit,
      link: unit ? `http://masterunitlist.info/Unit/Details/${unit.mulId}` : void 0,
      unique,
      available
    });
  }
  await nothing().refresh();
  return { status: "success", data: unitData };
});
const getPossibleUnitList = f(async (data) => {
  var _a;
  const searchTerm = (_a = data.get("searchTerm")) == null ? void 0 : _a.toString();
  const results = await prisma.unit.findMany({ where: { name: { contains: searchTerm } }, select: { mulId: true, name: true } });
  await nothing().refresh();
  return results;
});
const nothing = q(async () => {
});
for (const [name, fn] of Object.entries({ getPossibleUnitList, getUnitData, nothing })) {
  fn.__.id = "haigrw/" + name;
  fn.__.name = name;
}
export {
  getPossibleUnitList,
  getUnitData,
  nothing
};
